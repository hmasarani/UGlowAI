{"ast":null,"code":"import React,{useState}from\"react\";import{useNavigate}from\"react-router-dom\";import\"./TryFreeButton.css\";// Ensure your CSS is properly imported\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TryFreeButton=()=>{const[isModalOpen,setIsModalOpen]=useState(false);const[email,setEmail]=useState(\"\");const[emailError,setEmailError]=useState(\"\");const navigate=useNavigate();// Toggle modal visibility\nconst handleButtonClick=()=>{setIsModalOpen(true);};// Handle form input change\nconst handleEmailChange=e=>{setEmail(e.target.value);};// Handle form submission\nconst handleSubmit=e=>{e.preventDefault();// Validate email\nconst emailPattern=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;if(!email||!emailPattern.test(email)){setEmailError(\"Please enter a valid email address.\");return;}// If valid, redirect to the /try-free page\nlocalStorage.setItem(\"userEmail\",email);// Optional: Save email for later use\nsetIsModalOpen(false);navigate(\"/try-free\");};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"cta-button\",onClick:handleButtonClick,children:\"Try Now for Free\"}),isModalOpen&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Enter your email\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",placeholder:\"Your email\",value:email,onChange:handleEmailChange}),emailError&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:emailError}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"close-button\",onClick:()=>setIsModalOpen(false),children:\"X\"})]})})]});};export default TryFreeButton;","map":{"version":3,"names":["React","useState","useNavigate","jsx","_jsx","jsxs","_jsxs","TryFreeButton","isModalOpen","setIsModalOpen","email","setEmail","emailError","setEmailError","navigate","handleButtonClick","handleEmailChange","e","target","value","handleSubmit","preventDefault","emailPattern","test","localStorage","setItem","children","className","onClick","onSubmit","type","placeholder","onChange"],"sources":["/Users/masarani/Desktop/Glow/glowcare-mvp/src/components/TryFreeButton.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./TryFreeButton.css\";  // Ensure your CSS is properly imported\n\nconst TryFreeButton = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const navigate = useNavigate();\n\n  // Toggle modal visibility\n  const handleButtonClick = () => {\n    setIsModalOpen(true);\n  };\n\n  // Handle form input change\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Validate email\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (!email || !emailPattern.test(email)) {\n      setEmailError(\"Please enter a valid email address.\");\n      return;\n    }\n\n    // If valid, redirect to the /try-free page\n    localStorage.setItem(\"userEmail\", email);  // Optional: Save email for later use\n    setIsModalOpen(false);\n    navigate(\"/try-free\");\n  };\n\n  return (\n    <div>\n      <button className=\"cta-button\" onClick={handleButtonClick}>\n        Try Now for Free\n      </button>\n\n      {isModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <h2>Enter your email</h2>\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"email\"\n                placeholder=\"Your email\"\n                value={email}\n                onChange={handleEmailChange}\n              />\n              {emailError && <p className=\"error-message\">{emailError}</p>}\n              <button type=\"submit\">Submit</button>\n            </form>\n            <button className=\"close-button\" onClick={() => setIsModalOpen(false)}>\n              X\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TryFreeButton;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,qBAAqB,CAAG;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE/B,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACS,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACW,UAAU,CAAEC,aAAa,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAAAa,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAE9B;AACA,KAAM,CAAAa,iBAAiB,CAAGA,CAAA,GAAM,CAC9BN,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAED;AACA,KAAM,CAAAO,iBAAiB,CAAIC,CAAC,EAAK,CAC/BN,QAAQ,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAC1B,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAIH,CAAC,EAAK,CAC1BA,CAAC,CAACI,cAAc,CAAC,CAAC,CAElB;AACA,KAAM,CAAAC,YAAY,CAAG,kDAAkD,CACvE,GAAI,CAACZ,KAAK,EAAI,CAACY,YAAY,CAACC,IAAI,CAACb,KAAK,CAAC,CAAE,CACvCG,aAAa,CAAC,qCAAqC,CAAC,CACpD,OACF,CAEA;AACAW,YAAY,CAACC,OAAO,CAAC,WAAW,CAAEf,KAAK,CAAC,CAAG;AAC3CD,cAAc,CAAC,KAAK,CAAC,CACrBK,QAAQ,CAAC,WAAW,CAAC,CACvB,CAAC,CAED,mBACER,KAAA,QAAAoB,QAAA,eACEtB,IAAA,WAAQuB,SAAS,CAAC,YAAY,CAACC,OAAO,CAAEb,iBAAkB,CAAAW,QAAA,CAAC,kBAE3D,CAAQ,CAAC,CAERlB,WAAW,eACVJ,IAAA,QAAKuB,SAAS,CAAC,eAAe,CAAAD,QAAA,cAC5BpB,KAAA,QAAKqB,SAAS,CAAC,OAAO,CAAAD,QAAA,eACpBtB,IAAA,OAAAsB,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzBpB,KAAA,SAAMuB,QAAQ,CAAET,YAAa,CAAAM,QAAA,eAC3BtB,IAAA,UACE0B,IAAI,CAAC,OAAO,CACZC,WAAW,CAAC,YAAY,CACxBZ,KAAK,CAAET,KAAM,CACbsB,QAAQ,CAAEhB,iBAAkB,CAC7B,CAAC,CACDJ,UAAU,eAAIR,IAAA,MAAGuB,SAAS,CAAC,eAAe,CAAAD,QAAA,CAAEd,UAAU,CAAI,CAAC,cAC5DR,IAAA,WAAQ0B,IAAI,CAAC,QAAQ,CAAAJ,QAAA,CAAC,QAAM,CAAQ,CAAC,EACjC,CAAC,cACPtB,IAAA,WAAQuB,SAAS,CAAC,cAAc,CAACC,OAAO,CAAEA,CAAA,GAAMnB,cAAc,CAAC,KAAK,CAAE,CAAAiB,QAAA,CAAC,GAEvE,CAAQ,CAAC,EACN,CAAC,CACH,CACN,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAnB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}